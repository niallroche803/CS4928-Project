@startuml CafePOS Class Diagram
skinparam pageMargin 10
skinparam pageWidth 1200
skinparam pageHeight 800
scale 0.75
left to right direction
package "com.cafepos.common" {
    class Money {
        - amount: BigDecimal
        + {static} of(value: double): Money
        + {static} zero(): Money
        + add(other: Money): Money
        + multiply(qty: int): Money
        + multiply(qty: double): Money
        + equals(obj: Object): boolean
        + hashCode(): int
        + compareTo(other: Money): int
        + toString(): String
    }
}

package "com.cafepos.catalog" {
    interface Product {
        + id(): String
        + name(): String
        + basePrice(): Money
    }
    
    class SimpleProduct {
        - id: String
        - name: String
        - basePrice: Money
        + SimpleProduct(id: String, name: String, basePrice: Money)
        + id(): String
        + name(): String
        + basePrice(): Money
    }
    
    interface Catalog {
        + add(p: Product): void
        + findById(id: String): Optional<Product>
    }
    
    class InMemoryCatalog {
        - byId: HashMap<String, Product>
        + add(p: Product): void
        + findById(id: String): Optional<Product>
    }
}

package "com.cafepos.domain" {
    class Order {
        - id: long
        - items: ArrayList<LineItem>
        - observers: ArrayList<OrderObserver>
        + Order(id: long)
        + id(): long
        + items(): List<LineItem>
        + addItem(li: LineItem): void
        + subtotal(): Money
        + taxAtPercent(percent: int): Money
        + totalWithTax(percent: int): Money
        + pay(strategy: PaymentStrategy): void
        + register(o: OrderObserver): void
        + unregister(o: OrderObserver): void
        + notifyObservers(order: Order, eventType: String): void
        + markReady(): void
        + markItemAdded(): void
        + markPaid(): void
    }
    
    class LineItem {
        - product: Product
        - quantity: int
        + LineItem(product: Product, quantity: int)
        + product(): Product
        + quantity(): int
        + lineTotal(): Money
    }
    
    class OrderIds {
        - {static} counter: long
        + {static} next(): long
    }
}

package "com.cafepos.demo" {
    'class Week2Demo {
    '    + {static} main(args: String[]): void
    '}
    
    'class Week3Demo {
    '    + {static} main(args: String[]): void
    '}
    
    'class Week4Demo {
    '    + {static} main(args: String[]): void
    '}
    
    'class Week5Demo {
    '    + {static} main(args: String[]): void
    '}
    
    class Week6Demo {
        + {static} main(args: String[]): void
    }
}

package "com.cafepos.payment" {
    interface PaymentStrategy {
        + pay(order: Order): void
    }
    
    class CashPayment {
        + pay(order: Order): void
    }
    
    class CardPayment {
        - cardNumber: String
        + CardPayment(cardNumber: String)
        + pay(order: Order): void
    }
    
    class WalletPayment {
        - walletId: String
        + WalletPayment(walletId: String)
        + pay(order: Order): void
    }
}

package "com.cafepos.observers" {
    interface OrderObserver {
        + updated(order: Order, eventType: String): void
    }
    
    interface OrderPublisher {
        + register(o: OrderObserver): void
        + unregister(o: OrderObserver): void
        + notifyObservers(order: Order, eventType: String): void
    }
    
    class KitchenDisplay {
        + updated(order: Order, eventType: String): void
    }
    
    class DeliveryDesk {
        + updated(order: Order, eventType: String): void
    }
    
    class CustomerNotifier {
        + updated(order: Order, eventType: String): void
    }
}

package "com.cafepos.decorator" {
    interface Priced {
        + price(): Money
    }
    
    abstract class ProductDecorator {
        # base: Product
        + ProductDecorator(base: Product)
        + id(): String
        + basePrice(): Money
    }
    
    class ExtraShot {
        - {static} SURCHARGE: Money
        + ExtraShot(base: Product)
        + name(): String
        + price(): Money
    }
    
    class OatMilk {
        - {static} SURCHARGE: Money
        + OatMilk(base: Product)
        + name(): String
        + price(): Money
    }
    
    class SizeLarge {
        - {static} SURCHARGE: Money
        + SizeLarge(base: Product)
        + name(): String
        + price(): Money
    }
    
    class Syrup {
        - {static} SURCHARGE: Money
        + Syrup(base: Product)
        + name(): String
        + price(): Money
    }
}

package "com.cafepos.factory" {
    class ProductFactory {
        + create(recipe: String): Product
    }
    
    class DiscountPolicyFactory {
        + create(type: String): DiscountPolicy
    }
    
    class PaymentStrategyFactory {
        + create(type: String): PaymentStrategy
    }
}

package "com.cafepos.pricing" {
    interface DiscountPolicy {
        + discountOf(subtotal: Money): Money
    }
    
    interface TaxPolicy {
        + taxOn(amount: Money): Money
    }
    
    class PricingService {
        - discountPolicy: DiscountPolicy
        - taxPolicy: TaxPolicy
        + PricingService(discountPolicy: DiscountPolicy, taxPolicy: TaxPolicy)
        + price(subtotal: Money): PricingResult
    }
    
    class "PricingService.PricingResult" as PricingResult {
        + subtotal: Money
        + discount: Money
        + tax: Money
        + total: Money
    }
    
    class LoyaltyPercentDiscount {
        - percent: int
        + LoyaltyPercentDiscount(percent: int)
        + discountOf(subtotal: Money): Money
    }
    
    class FixedCouponDiscount {
        - amount: Money
        + FixedCouponDiscount(amount: Money)
        + discountOf(subtotal: Money): Money
    }
    
    class NoDiscount {
        + discountOf(subtotal: Money): Money
    }
    
    class FixedRateTaxPolicy {
        - percent: int
        + FixedRateTaxPolicy(percent: int)
        + taxOn(amount: Money): Money
        + getPercent(): int
    }
    
    class ReceiptPrinter {
        + format(recipe: String, qty: int, pr: PricingResult, taxPercent: int): String
        + print(receipt: String): void
    }
}

package "com.cafepos.checkout" {
    class CheckoutService {
        - factory: ProductFactory
        - pricing: PricingService
        - printer: ReceiptPrinter
        - taxPercent: int
        + CheckoutService(factory: ProductFactory, pricing: PricingService, printer: ReceiptPrinter, taxPercent: int)
        + checkout(recipe: String, qty: int, paymentStrategy: PaymentStrategy): String
    }
}

package "com.cafepos.smells" {
    class OrderManagerGod {
        - factory: ProductFactory
        - discountPolicy: DiscountPolicy
        - taxPolicy: TaxPolicy
        - printer: ReceiptPrinter
        - paymentStrategy: PaymentStrategy
        + OrderManagerGod(factory: ProductFactory, discountPolicy: DiscountPolicy, taxPolicy: TaxPolicy, printer: ReceiptPrinter, paymentStrategy: PaymentStrategy)
        + process(recipe: String, qty: int, paymentType: String, paymentDetails: String, discountCode: String, printReceipt: boolean): String
    }
}

' Relationships
SimpleProduct ..|> Product
InMemoryCatalog ..|> Catalog
InMemoryCatalog --> Product : stores
Order *-- LineItem : contains
LineItem --> Product : references
LineItem --> Money : calculates
Order --> Money : calculates
SimpleProduct --> Money : has basePrice
Money ..|> Comparable
Order --> PaymentStrategy : uses
Order ..|> OrderPublisher
Order --> OrderObserver : notifies
CashPayment ..|> PaymentStrategy
CardPayment ..|> PaymentStrategy
WalletPayment ..|> PaymentStrategy
KitchenDisplay ..|> OrderObserver
DeliveryDesk ..|> OrderObserver
CustomerNotifier ..|> OrderObserver
'Week2Demo --> Catalog : uses
'Week2Demo --> InMemoryCatalog : creates
'Week2Demo --> SimpleProduct : creates
'Week2Demo --> Order : creates
'Week2Demo --> LineItem : creates
'Week2Demo --> OrderIds : uses
'Week3Demo --> Catalog : uses
'Week3Demo --> InMemoryCatalog : creates
'Week3Demo --> SimpleProduct : creates
'Week3Demo --> Order : creates
'Week3Demo --> LineItem : creates
'Week3Demo --> OrderIds : uses
'Week3Demo --> CashPayment : creates
'Week3Demo --> CardPayment : creates
'Week3Demo --> WalletPayment : creates
'Week4Demo --> Catalog : uses
'Week4Demo --> InMemoryCatalog : creates
'Week4Demo --> SimpleProduct : creates
'Week4Demo --> Order : creates
'Week4Demo --> LineItem : creates
'Week4Demo --> OrderIds : uses
'Week4Demo --> KitchenDisplay : creates
'Week4Demo --> DeliveryDesk : creates
'Week4Demo --> CustomerNotifier : creates
'Week4Demo --> CashPayment : creates
'Week5Demo --> ProductFactory : uses
'Week5Demo --> Order : creates
'Week5Demo --> LineItem : creates
'Week5Demo --> OrderIds : uses
Week6Demo --> CheckoutService : uses
Week6Demo --> PricingService : uses
Week6Demo --> ProductFactory : uses
Week6Demo --> OrderManagerGod : uses
Week6Demo --> PaymentStrategy : uses
ProductDecorator ..|> Product
ProductDecorator ..|> Priced
ProductDecorator --> Product : decorates
ExtraShot --|> ProductDecorator
OatMilk --|> ProductDecorator
SizeLarge --|> ProductDecorator
Syrup --|> ProductDecorator
ExtraShot --> Money : uses
OatMilk --> Money : uses
SizeLarge --> Money : uses
Syrup --> Money : uses
ProductFactory --> Product : creates
ProductFactory --> SimpleProduct : creates
ProductFactory --> ExtraShot : creates
ProductFactory --> OatMilk : creates
ProductFactory --> SizeLarge : creates
ProductFactory --> Syrup : creates
DiscountPolicyFactory --> DiscountPolicy : creates
PaymentStrategyFactory --> PaymentStrategy : creates
PricingService --> DiscountPolicy : uses
PricingService --> TaxPolicy : uses
PricingService --> PricingResult : creates
LoyaltyPercentDiscount ..|> DiscountPolicy
FixedCouponDiscount ..|> DiscountPolicy
NoDiscount ..|> DiscountPolicy
FixedRateTaxPolicy ..|> TaxPolicy
ReceiptPrinter --> PricingResult : uses
CheckoutService --> ProductFactory : uses
CheckoutService --> PricingService : uses
CheckoutService --> ReceiptPrinter : uses
CheckoutService --> PaymentStrategy : uses
CheckoutService --> Order : creates
CheckoutService --> LineItem : creates
OrderManagerGod --> ProductFactory : uses
OrderManagerGod --> DiscountPolicy : uses
OrderManagerGod --> TaxPolicy : uses
OrderManagerGod --> ReceiptPrinter : uses
OrderManagerGod --> PaymentStrategy : uses
OrderManagerGod --> Order : creates
OrderManagerGod --> LineItem : creates
OrderManagerGod --> PricingResult : creates

@enduml