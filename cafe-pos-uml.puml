@startuml CafePOS Class Diagram
skinparam pageMargin 10
skinparam pageWidth 1200
skinparam pageHeight 800
scale 0.75
left to right direction
package "com.cafepos.common" {
    class Money {
        - amount: BigDecimal
        + {static} of(value: double): Money
        + {static} zero(): Money
        + add(other: Money): Money
        + multiply(qty: int): Money
        + multiply(qty: double): Money
        + equals(obj: Object): boolean
        + hashCode(): int
        + compareTo(other: Money): int
        + toString(): String
    }
}

package "com.cafepos.catalog" {
    interface Product {
        + id(): String
        + name(): String
        + basePrice(): Money
    }
    
    class SimpleProduct {
        - id: String
        - name: String
        - basePrice: Money
        + SimpleProduct(id: String, name: String, basePrice: Money)
        + id(): String
        + name(): String
        + basePrice(): Money
    }
    
    interface Catalog {
        + add(p: Product): void
        + findById(id: String): Optional<Product>
    }
    
    class InMemoryCatalog {
        - byId: HashMap<String, Product>
        + add(p: Product): void
        + findById(id: String): Optional<Product>
    }
}

package "com.cafepos.domain" {
    class Order {
        - id: long
        - items: ArrayList<LineItem>
        - observers: ArrayList<OrderObserver>
        + Order(id: long)
        + id(): long
        + items(): List<LineItem>
        + addItem(li: LineItem): void
        + subtotal(): Money
        + taxAtPercent(percent: int): Money
        + totalWithTax(percent: int): Money
        + pay(strategy: PaymentStrategy): void
        + register(o: OrderObserver): void
        + unregister(o: OrderObserver): void
        + notifyObservers(order: Order, eventType: String): void
        + markReady(): void
        + markItemAdded(): void
        + markPaid(): void
    }
    
    class LineItem {
        - product: Product
        - quantity: int
        + LineItem(product: Product, quantity: int)
        + product(): Product
        + quantity(): int
        + lineTotal(): Money
    }
    
    class OrderIds {
        - {static} counter: long
        + {static} next(): long
    }
}

package "com.cafepos.demo" {
    'class Week2Demo {
    '    + {static} main(args: String[]): void
    '}
    
    'class Week3Demo {
    '    + {static} main(args: String[]): void
    '}
    
    'class Week4Demo {
    '    + {static} main(args: String[]): void
    '}
    
    class Week5Demo {
        + {static} main(args: String[]): void
    }
}

package "com.cafepos.payment" {
    interface PaymentStrategy {
        + pay(order: Order): void
    }
    
    class CashPayment {
        + pay(order: Order): void
    }
    
    class CardPayment {
        - cardNumber: String
        + CardPayment(cardNumber: String)
        + pay(order: Order): void
    }
    
    class WalletPayment {
        - walletId: String
        + WalletPayment(walletId: String)
        + pay(order: Order): void
    }
}

package "com.cafepos.observers" {
    interface OrderObserver {
        + updated(order: Order, eventType: String): void
    }
    
    interface OrderPublisher {
        + register(o: OrderObserver): void
        + unregister(o: OrderObserver): void
        + notifyObservers(order: Order, eventType: String): void
    }
    
    class KitchenDisplay {
        + updated(order: Order, eventType: String): void
    }
    
    class DeliveryDesk {
        + updated(order: Order, eventType: String): void
    }
    
    class CustomerNotifier {
        + updated(order: Order, eventType: String): void
    }
}

package "com.cafepos.decorator" {
    interface Priced {
        + price(): Money
    }
    
    abstract class ProductDecorator {
        # base: Product
        + ProductDecorator(base: Product)
        + id(): String
        + basePrice(): Money
    }
    
    class ExtraShot {
        - {static} SURCHARGE: Money
        + ExtraShot(base: Product)
        + name(): String
        + price(): Money
    }
    
    class OatMilk {
        - {static} SURCHARGE: Money
        + OatMilk(base: Product)
        + name(): String
        + price(): Money
    }
    
    class SizeLarge {
        - {static} SURCHARGE: Money
        + SizeLarge(base: Product)
        + name(): String
        + price(): Money
    }
    
    class Syrup {
        - {static} SURCHARGE: Money
        + Syrup(base: Product)
        + name(): String
        + price(): Money
    }
}

package "com.cafepos.factory" {
    class ProductFactory {
        + create(recipe: String): Product
    }
}

' Relationships
SimpleProduct ..|> Product
InMemoryCatalog ..|> Catalog
InMemoryCatalog --> Product : stores
Order *-- LineItem : contains
LineItem --> Product : references
LineItem --> Money : calculates
Order --> Money : calculates
SimpleProduct --> Money : has basePrice
Money ..|> Comparable
Order --> PaymentStrategy : uses
Order ..|> OrderPublisher
Order --> OrderObserver : notifies
CashPayment ..|> PaymentStrategy
CardPayment ..|> PaymentStrategy
WalletPayment ..|> PaymentStrategy
KitchenDisplay ..|> OrderObserver
DeliveryDesk ..|> OrderObserver
CustomerNotifier ..|> OrderObserver
'Week2Demo --> Catalog : uses
'Week2Demo --> InMemoryCatalog : creates
'Week2Demo --> SimpleProduct : creates
'Week2Demo --> Order : creates
'Week2Demo --> LineItem : creates
'Week2Demo --> OrderIds : uses
'Week3Demo --> Catalog : uses
'Week3Demo --> InMemoryCatalog : creates
'Week3Demo --> SimpleProduct : creates
'Week3Demo --> Order : creates
'Week3Demo --> LineItem : creates
'Week3Demo --> OrderIds : uses
'Week3Demo --> CashPayment : creates
'Week3Demo --> CardPayment : creates
'Week3Demo --> WalletPayment : creates
'Week4Demo --> Catalog : uses
'Week4Demo --> InMemoryCatalog : creates
'Week4Demo --> SimpleProduct : creates
'Week4Demo --> Order : creates
'Week4Demo --> LineItem : creates
'Week4Demo --> OrderIds : uses
'Week4Demo --> KitchenDisplay : creates
'Week4Demo --> DeliveryDesk : creates
'Week4Demo --> CustomerNotifier : creates
'Week4Demo --> CashPayment : creates
Week5Demo --> ProductFactory : uses
Week5Demo --> Order : creates
Week5Demo --> LineItem : creates
Week5Demo --> OrderIds : uses
ProductDecorator ..|> Product
ProductDecorator ..|> Priced
ProductDecorator --> Product : decorates
ExtraShot --|> ProductDecorator
OatMilk --|> ProductDecorator
SizeLarge --|> ProductDecorator
Syrup --|> ProductDecorator
ExtraShot --> Money : uses
OatMilk --> Money : uses
SizeLarge --> Money : uses
Syrup --> Money : uses
ProductFactory --> Product : creates
ProductFactory --> SimpleProduct : creates
ProductFactory --> ExtraShot : creates
ProductFactory --> OatMilk : creates
ProductFactory --> SizeLarge : creates
ProductFactory --> Syrup : creates

@enduml